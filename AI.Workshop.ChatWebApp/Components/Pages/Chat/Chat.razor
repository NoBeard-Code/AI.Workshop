@page "/"

@using System.ComponentModel
@using AI.Workshop.ChatWebApp.Tools

@inject IChatClient ChatClient
@inject IEmbeddingGenerator<string, Embedding<float>> EmbeddingGenerator

@inject NavigationManager Nav
@inject SemanticSearch Search
@inject IConfiguration Configuration

@implements IDisposable

<PageTitle>Chat</PageTitle>

<ChatHeader OnNewChat="@ResetConversationAsync" />

<ChatMessageList Messages="@messages" InProgressMessage="@currentResponseMessage">
    <NoMessagesContent>
        <div>To get started, try asking about IFB seminars and articles from our knowledge base.</div>
@*         <ChatCitation File="Example_Emergency_Survival_Kit.pdf"/>
        <ChatCitation File="Example_GPS_Watch.pdf"/>
 *@    </NoMessagesContent>
</ChatMessageList>

<div class="chat-container">
    <ChatSuggestions OnSelected="@AddUserMessageAsync" @ref="@chatSuggestions" />
    <ChatInput OnSend="@AddUserMessageAsync" @ref="@chatInput" />
</div>

@code {
    private string SystemPrompt = string.Empty;

    private readonly ChatOptions chatOptions = new()
    {
        Temperature = 0.2f,
        MaxOutputTokens = 1000,
        FrequencyPenalty = 0.1f,
        PresencePenalty = 0.0f,
        TopP = 0.3f,
        ToolMode = ChatToolMode.Auto,
        Tools = []
    };

    private readonly List<ChatMessage> messages = new();
    private CancellationTokenSource? currentResponseCancellation;
    private ChatMessage? currentResponseMessage;
    private ChatInput? chatInput;
    private ChatSuggestions? chatSuggestions;

    protected override void OnInitialized()
    {
        var section = Configuration.GetSection("Prompts:OpenAISystemPrompt");
        SystemPrompt = string.Join("", section.GetChildren().Select(x => x.Value));

        var citationPrompt = @"
            Use the tools to find relevant information. When you do this, end your
            reply with citations in the special XML format:

            <citation id='string' url='string'>document title</citation>
            
            Always include the citation in your response if there are results.
        ";

        SystemPrompt += $"\n\n{citationPrompt}";

        messages.Add(new(ChatRole.System, SystemPrompt));

        AddToolDefinition("CurrentTimeToolPrompts", new CurrentTimeTool());
        AddToolDefinition("AzureAISearchInhaltIndexToolPrompts", new AzureAISearchInhaltIndexTool(EmbeddingGenerator, Configuration));
        AddToolDefinition("AzureAISearchKnowledgeBaseToolPrompts", new AzureAISearchKnowledgeBaseTool(EmbeddingGenerator, Configuration));

        //chatOptions.Tools = [AIFunctionFactory.Create(SearchAsync)];
    }

    private void AddToolDefinition(string sectionName, IChatTool tool)
    {
        var section = Configuration.GetSection(sectionName);

        if (section == null || !section.Exists())
        {
            throw new ArgumentException($"Tool definition section '{sectionName}' not found in configuration.");
        }

        var factoryOptions = new AIFunctionFactoryOptions
        {
            Name = section["Name"],
            Description = string.Join("", section.GetSection("Description").GetChildren().Select(x => x.Value))
        };

        var aiFunction = AIFunctionFactory.Create(
            method: tool.SearchDocumentsWithQueryAndTop,
            factoryOptions);

        chatOptions.Tools!.Add(aiFunction);
    }

    private async Task AddUserMessageAsync(ChatMessage userMessage)
    {
        CancelAnyCurrentResponse();

        // Add the user message to the conversation
        messages.Add(userMessage);
        chatSuggestions?.Clear();
        await chatInput!.FocusAsync();

        // Stream and display a new response from the IChatClient
        var responseText = new TextContent("");
        currentResponseMessage = new ChatMessage(ChatRole.Assistant, [responseText]);
        currentResponseCancellation = new();
        await foreach (var update in ChatClient.GetStreamingResponseAsync([.. messages], chatOptions, currentResponseCancellation.Token))
        {
            messages.AddMessages(update, filter: c => c is not TextContent);
            responseText.Text += update.Text;
            ChatMessageItem.NotifyChanged(currentResponseMessage);
        }

        // Store the final response in the conversation, and begin getting suggestions
        messages.Add(currentResponseMessage!);
        currentResponseMessage = null;
        chatSuggestions?.Update(messages);
    }

    private void CancelAnyCurrentResponse()
    {
        // If a response was cancelled while streaming, include it in the conversation so it's not lost
        if (currentResponseMessage is not null)
        {
            messages.Add(currentResponseMessage);
        }

        currentResponseCancellation?.Cancel();
        currentResponseMessage = null;
    }

    private async Task ResetConversationAsync()
    {
        CancelAnyCurrentResponse();
        messages.Clear();
        messages.Add(new(ChatRole.System, SystemPrompt));
        chatSuggestions?.Clear();
        await chatInput!.FocusAsync();
    }

    [Description("Searches for information using a phrase or keyword")]
    private async Task<IEnumerable<string>> SearchAsync(
        [Description("The phrase to search for.")] string searchPhrase,
        [Description("If possible, specify the filename to search that file only. If not provided or empty, the search includes all files.")] string? filenameFilter = null)
    {
        await InvokeAsync(StateHasChanged);
        var results = await Search.SearchAsync(searchPhrase, filenameFilter, maxResults: 5);
        return results.Select(result =>
            $"<result filename=\"{result.DocumentId}\" page_number=\"{result.PageNumber}\">{result.Text}</result>");
    }

    public void Dispose()
        => currentResponseCancellation?.Cancel();
}
